#!/usr/bin/env python

"""Description:
"""

__author__ = "Yiming Peng"
__copyright__ = "Copyright 2018, baselines"
__credits__ = ["Yiming Peng"]
__license__ = "GPL"
__version__ = "1.0"
__maintainer__ = "Yiming Peng"
__email__ = "yiming.peng@ecs.vuw.ac.nz"
__status__ = "Prototype"

import tensorflow as tf
import numpy as np

# raw_input = tf.placeholder(tf.float32, shape = [None, 16, 9])
raw_input = tf.placeholder(tf.float32, shape = [None, 16, 9])
# now declare the weights connecting the input to the hidden layer
last_out = raw_input
# for i in range(1):
#     last_out = tf.nn.tanh(tf.layers.dense(last_out, 32, name="fc%i"%(i+1),
#                                           kernel_initializer=tf.constant_initializer(1.0)))
print(last_out.shape[0])
output = tf.layers.dense(last_out, 1, name='final', kernel_initializer=tf.constant_initializer(1.0))

print(output.shape)
compute_output = tf.map_fn(lambda x: output, raw_input, dtype=tf.float32)[0]
print(compute_output.shape)
# Run SGD
with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())

    # print(sess.run(compute_output, {raw_input:np.array([[[0., 0., 0., 0., 0., 0., 0., 0., 0.]]])}))
    # print(np.array([[[0., 0., 0., 0., 0., 0., 0., 0., 0.],
    #             [0., 0., 0., 0., 0., 0., 0., 0., 0.],
    #             [0., 0., 0., 0., 0., 0., 0., 0., 0.],
    #             [0., 0., 0., 0., 0., 0., 0., 0., 0.],
    #             [0., 0., 0., 0., 0., 0., 0., 0., 0.],
    #             [0., 0., 0., 0., 0., 0., 0., 0., 0.],
    #             [0., 0., 0., 0., 0., 0., 0., 0., 0.],
    #             [0., 0., 0., 0., 0., 0., 0., 0., 0.],
    #             [0., 0., 0., 0., 0., 0., 0., 0., 0.],
    #             [0., 0., 0., 0., 0., 0., 0., 0., 0.],
    #             [0., 0., 0., 0., 0., 0., 0., 0., 0.],
    #             [0., 0., 0., 0., 0., 0., 0., 0., 0.],
    #             [0., 0., 0., 0., 0., 0., 0., 0., 0.],
    #             [0., 0., 0., 0., 0., 0., 0., 0., 0.],
    #             [0., 0., 0., 0., 0., 0., 0., 0., 0.],
    #             [0., 0., 0., 0., 0., 0., 0., 0., 0.]], [[0., 0., 0., 0., 0., 0., 0., 0., 0.],
    #             [0., 0., 0., 0., 0., 0., 0., 0., 0.],
    #             [0., 0., 0., 0., 0., 0., 0., 0., 0.],
    #             [0., 0., 0., 0., 0., 0., 0., 0., 0.],
    #             [0., 0., 0., 0., 0., 0., 0., 0., 0.],
    #             [0., 0., 0., 0., 0., 0., 0., 0., 0.],
    #             [0., 0., 0., 0., 0., 0., 0., 0., 0.],
    #             [0., 0., 0., 0., 0., 0., 0., 0., 0.],
    #             [0., 0., 0., 0., 0., 0., 0., 0., 0.],
    #             [0., 0., 0., 0., 0., 0., 0., 0., 0.],
    #             [0., 0., 0., 0., 0., 0., 0., 0., 0.],
    #             [0., 0., 0., 0., 0., 0., 0., 0., 0.],
    #             [0., 0., 0., 0., 0., 0., 0., 0., 0.],
    #             [0., 0., 0., 0., 0., 0., 0., 0., 0.],
    #             [0., 0., 0., 0., 0., 0., 0., 0., 0.],
    #             [0., 0., 0., 0., 0., 0., 0., 0., 0.]]]).shape)
    print(sess.run(compute_output, {raw_input:np.array([[[0., 0., 0., 0., 0., 0., 0., 0., 0.],
                [0., 0., 0., 0., 0., 0., 0., 0., 0.],
                [0., 0., 0., 0., 0., 0., 0., 0., 0.],
                [0., 0., 0., 0., 0., 0., 0., 0., 0.],
                [0., 0., 0., 0., 0., 0., 0., 0., 0.],
                [0., 0., 0., 0., 0., 0., 0., 0., 0.],
                [0., 0., 0., 0., 0., 0., 0., 0., 0.],
                [0., 0., 0., 0., 2., 0., 0., 0., 0.],
                [0., 0., 0., 0., 0., 0., 0., 0., 0.],
                [0., 0., 0., 0., 0., 0., 0., 0., 0.],
                [0., 0., 0., 0., 0., 0., 0., 0., 0.],
                [0., 0., 0., 0., 0., 0., 0., 0., 0.],
                [0., 0., 0., 0., 0., 0., 0., 0., 0.],
                [0., 0., 0., 0., 0., 0., 0., 0., 0.],
                [0., 0., 0., 0., 0., 0., 0., 0., 0.],
                [0., 0., 0., 0., 0., 0., 0., 0., 0.]], [[0., 1., 0., 0., 0., 0., 0., 0., 0.],
                [0., 0., 0., 0., 0., 0., 0., 0., 0.],
                [0., 0., 0., 0., 0., 0., 0., 0., 0.],
                [0., 0., 0., 0., 0., 0., 0., 0., 0.],
                [0., 0., 0., 0., 0., 0., 0., 0., 0.],
                [0., 0., 0., 0., 0., 0., 0., 0., 0.],
                [0., 0., 0., 0., 0., 0., 0., 0., 0.],
                [0., 0., 0., 0., 0., 0., 0., 0., 0.],
                [0., 0., 0., 0., 0., 0., 0., 0., 0.],
                [0., 0., 0., 0., 0., 0., 0., 0., 0.],
                [0., 0., 0., 0., 0., 0., 0., 0., 0.],
                [0., 0., 0., 0., 0., 0., 0., 0., 0.],
                [0., 0., 0., 0., 0., 0., 0., 0., 0.],
                [0., 0., 0., 0., 0., 0., 0., 0., 0.],
                [0., 0., 0., 0., 0., 0., 0., 0., 0.],
                [0., 0., 0., 0., 0., 0., 0., 0., 0.]]])}))
    #
    # print(sess.run(compute_output, {raw_input:np.array([[[1., 1., 1., 1., 1., 1., 1., 1., 1.],
    #             [2., 1., 1., 1., 1., 1., 1., 1., 1.],
    #             [1., 1., 1., 1., 1., 1., 1., 1., 1.],
    #             [1., 1., 1., 1., 1., 1., 1., 1., 1.],
    #             [1., 1., 1., 1., 1., 1., 1., 1., 1.],
    #             [1., 1., 1., 1., 1., 1., 1., 1., 1.],
    #             [1., 1., 1., 1., 1., 1., 1., 1., 1.],
    #             [1., 1., 1., 3., 1., 1., 1., 1., 1.],
    #             [1., 1., 1., 1., 1., 1., 1., 1., 1.],
    #             [1., 1., 1., 1., 1., 1., 1., 1., 1.],
    #             [1., 1., 1., 1., 1., 1., 1., 1., 1.],
    #             [1., 1., 1., 1., 1., 1., 1., 1., 1.],
    #             [1., 1., 1., 1., 1., 1., 1., 1., 1.],
    #             [1., 1., 1., 1., 1., 1., 1., 1., 1.],
    #             [1., 1., 1., 1., 1., 1., 1., 1., 1.],
    #             [1., 1., 1., 1., 1., 1., 1., 1., 1.]]])}))
